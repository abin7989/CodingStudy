import java.util.*;
import java.awt.Point;
import java.io.*;

class Solution {
	static Queue<Integer> xq = new ArrayDeque<>();
	static Queue<Integer> yq = new ArrayDeque<>();
	static Queue<Integer> cntq = new ArrayDeque<>();

	public static void main(String args[]) throws Exception {
		// 400*400*400
		// System.out.println(400*400*400);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int T;
		T = Integer.parseInt(br.readLine());
		// 4,8,12,16,20,24,28,31,34,38
		int ser[] = new int[50];
		for (int i = 0, a = 1, b = 4; i < 50; i++, b += 4) {
			ser[i] = a;
			a = a + b;
		}

		for (int test_case = 1; test_case <= T; test_case++) {
			st = new StringTokenizer(br.readLine(), " ");
			int n = Integer.parseInt(st.nextToken());
			int m = Integer.parseInt(st.nextToken());
			char map[][] = new char[n][n];
			boolean v[][] = new boolean[n][n];
			int dx[] = { 1, -1, 0, 0 };
			int dy[] = { 0, 0, 1, -1 };
			int max = 0;
			for (int i = 0; i < n; i++) {
				st = new StringTokenizer(br.readLine(), " ");
				for (int j = 0, index = 0; j < n; j++, index += 2) {
					map[i][j] = st.nextToken().charAt(index);
				}
			}
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					int level = 0;
					for (int k = 0; k < n; k++) {
						Arrays.fill(v[k], false);
					}
					xq.offer(i);
					yq.offer(j);
					if (map[i][j] == '1')
						cntq.offer(m);
					else
						cntq.offer(0);
					int fin = 0;
					while (!xq.isEmpty()) {
						int size = xq.size();
						level++;
						fin -= ser[level];
						while (size != 0) {
							int x = xq.poll();
							int y = yq.poll();
							int cnt = cntq.poll();
							fin += cnt;
							for (int k = 0; k < 4; k++) {
								int nx = x + dx[k];
								int ny = y + dy[k];
								if (nx < 0 || nx >= n || ny < 0 || ny >= n | v[nx][ny])
									continue;
								v[nx][ny] = true;
								xq.offer(nx);
								yq.offer(ny);
								if (map[nx][ny] == '1')
									cntq.offer(m);
								else
									cntq.offer(0);
							}
						}
					}//end while
					max = Math.max(max, fin);
				}
			}

		}
	}
}
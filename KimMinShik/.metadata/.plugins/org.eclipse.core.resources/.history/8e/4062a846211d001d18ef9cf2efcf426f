import java.io.*;
import java.util.*;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringBuilder sb = new StringBuilder(1000);
	static StringTokenizer st = null;
	static boolean map[][] = new boolean[10][10];
	static boolean v[][] = new boolean[10][10];
	static int c[] = { 0, 5, 5, 5, 5, 5 };
	static int min = Integer.MAX_VALUE;

	static void DFS(int x, int y, int cnt) {
		if (x >= 9 && y >= 9) {
			min = Math.min(min, cnt);
			return;
		}
		if (min < cnt) {
			return;
		}
		if (y > 9) {
			DFS(x + 1, 0, cnt);
		}
		if (map[x][y]) {

			for (int t = 5; t > 0; t--) {
				if (c[t] < 0)
					continue;
				boolean pass = true;
				nf: for (int p = x; p < x + t; p++) {
					for (int q = y; q < y + t; q++) {
						if (!map[p][q] || v[p][q]) {
							pass = false;
							break nf;
						}
					}
				}
				if (pass) {
					for (int p = x; p < x + t; p++) {
						for (int q = y; q < y+ t; q++) {
							v[p][q] = !v[p][q];
						}
					}
					c[t]--;
					DFS(x,y+1,cnt+1);
					for (int p = x; p < x + t; p++) {
						for (int q = y; q < y+ t; q++) {
							v[p][q] = !v[p][q];
						}
					}
					c[t]++;
				}
			}

		}
	}

	public static void main(String[] args) throws IOException {

		String s = null;
		for (int i = 0; i < 10; i++) {
			s = br.readLine();
			for (int j = 0, index = 0; j < 10; j++, index += 2) {
				if (s.charAt(index) == '1')
					map[i][j] = true;
			}
		}
		for (int i = 0; i < 10; i++) {
			nf: for (int j = 0; j < 10; j++) {
				if (v[i][j])
					continue;
				if (map[i][j]) {
					if (i + t > 10 || j + t > 10)
						continue;

					
					cnt++;
					c[t]--;
					if (c[t] <= 0)
						continue nnf;
				}
			}
		}
	}

	boolean pass = true;out:for(
	int i = 0;i<10;i++)
	{
		for (int j = 0; j < 10; j++) {
			if (map[i][j] != v[i][j]) {
				pass = false;
				break out;
			}
		}
	}if(pass)System.out.println(cnt);else System.out.println(-1);return;
}}

import java.io.*;
import java.util.*;

public class Main {
		static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		static StringTokenizer st;
		static StringBuilder sb  = new StringBuilder(1000);
		static int cubeSet[] = {6,4,3,5,2,1};
		static	 int cubeNum[] = new int [7];
		static int px;
		static int py;
		static int com;
		static int nowNum =6;
		public static void main(String[] args) throws IOException {
			st = new StringTokenizer(br.readLine()," " );
			int n = Integer.parseInt(st.nextToken());
			int m = Integer.parseInt(st.nextToken());
			int px = Integer.parseInt(st.nextToken());
			int py = Integer.parseInt(st.nextToken());
			int com = Integer.parseInt(st.nextToken());
			int map[][] = new int [n][m];
			for(int i = 0 ; i < n ; i++) {
				st = new StringTokenizer(br.readLine()," " );
				for(int j = 0 ; j < m ; j++) {
					map[i][j] = Integer.parseInt(st.nextToken());
				}
			}
			st = new StringTokenizer(br.readLine()," " );
			
			for(int i =0; i <com;i++) {
				int pos = Integer.parseInt(st.nextToken());
				int temp;
				switch (pos) {
				case 1:
					if(py+1>=n)
						continue;
					py++;
					if(map[px][py] == 0) {
						map[px][py] =cubeNum[cubeSet[0]];
					}
					else {
						cubeNum[cubeSet[0]] = map[px][py];
						map[px][py] = 0;
					}
					sb.append(cubeNum[cubeSet[5]]).append("\n");
					temp = cubeSet[0];
					cubeSet[0] = cubeSet[2];
					cubeSet[2] = cubeSet[5];
					cubeSet[5] = cubeSet[1];
					cubeSet[1] = temp;
					break;
				case 2:
					if(py-1<0)
						continue;
					py--;
					if(map[px][py] == 0) {
						map[px][py] = cubeNum[cubeSet[0]];
					}
					else {
						cubeNum[cubeSet[0]] = map[px][py];
						map[px][py] = 0;
					}
					sb.append(cubeNum[cubeSet[5]]).append("\n");
					temp = cubeSet[0];
					cubeSet[0] = cubeSet[1];
					cubeSet[1] = cubeSet[5];
					cubeSet[5] = cubeSet[2];
					cubeSet[2] = temp;
					break;
				case 3:
					//{1,4,3,2,5,6};
					if(px-1<0)
						continue;
					px--;
					if(map[px][py] == 0) {
						map[px][py] = cubeNum[cubeSet[0]];
					}
					else {
						cubeNum[cubeSet[0]] = map[px][py];
						map[px][py] = 0;
					}
					sb.append(cubeNum[cubeSet[5]]).append("\n");
					temp = cubeSet[0];
					cubeSet[0] = cubeSet[4];
					cubeSet[4] = cubeSet[5];
					cubeSet[5] = cubeSet[3];
					cubeSet[3] = temp;
					break;
				case 4:
					if(px+1>=n)
						continue;
					px++;
					if(map[px][py] == 0) {
						map[px][py] = cubeNum[cubeSet[0]];
					}
					else {
						cubeNum[cubeSet[0]] = map[px][py];
						map[px][py] = 0;
					}
					sb.append(cubeNum[cubeSet[5]]).append("\n");
					temp = cubeSet[0];
					cubeSet[0] = cubeSet[3];
					cubeSet[3] = cubeSet[5];
					cubeSet[5] = cubeSet[4];
					cubeSet[4] = temp;
					break;

				default:
					break;
				}
			}
			System.out.println(sb);
		}
}


// 1 2 3 4 5 6
//         3
//           5
//   7
//     8
//   
//
//
//
//
//




















import java.io.*;
import java.util.*;

public class Main {
	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	static StringBuilder sb = new StringBuilder(3000);
	static StringTokenizer st = null;
	static Node[] map;
	static boolean v[];
	static void DFS(Node node,int cnt) {
		if(cnt==4) {
			System.out.println(1);
			System.exit(0);
		}
		for(int i = 0,size =node.nodeL.size();i<size;i++) {
			if(v[node.nodeL.get(i).num])
				continue;
			v[node.nodeL.get(i).num] = true;
			DFS(node.nodeL.get(i),cnt+1);
		}
	}
	public static void main(String[] args) throws IOException {
		st = new StringTokenizer(br.readLine()," ");
		int n = Integer.parseInt(st.nextToken());
		int m = Integer.parseInt(st.nextToken());
		map = new Node[n];
		v = new boolean[n];
		int from=0;
		int to=0;
		for(int i = 0 ; i<n;i++) {
			map[i] = new Node(i);
		}
		for(int i = 0 ; i <m;i++) {
			st = new StringTokenizer(br.readLine()," ");
			from = Integer.parseInt(st.nextToken());
			to = Integer.parseInt(st.nextToken());
			map[from].nodeL.add(map[to]);
			map[to].nodeL.add(map[from]);
		}
		for(int i =0;i<n;i++) {
			Arrays.fill(v, false);
			v[i] = true;
			DFS(map[i],0);
		}
	}
	static class Node{
		int num;
		List<Node> nodeL = new ArrayList<Main.Node>();
		public Node(int num) {
			this.num=num;
			// TODO Auto-generated constructor stub
		}
	}
}
